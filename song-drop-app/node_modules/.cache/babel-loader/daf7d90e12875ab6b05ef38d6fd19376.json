{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\if994249\\\\eclipse-workspace\\\\song-drop\\\\song-drop-app\\\\src\\\\App.js\";\n// src/App.js\nimport React, { Component } from \"react\";\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport './App.css';\nimport PlayRateSlider from './control-sliders/PlayRateSlider';\nimport VolumeSlider from './control-sliders/VolumeSlider';\nimport PlayBackSlider from './control-sliders/PlayBackSlider';\nimport Upload from './Upload';\nimport TrackList from './track-list/TrackList';\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\nconst audioContext = new AudioContext();\nconst client = new W3CWebSocket('ws://172.18.86.35:5000');\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      volume: 0,\n      playedQueue: null,\n      unplayedQueue: null,\n      requestCompleted: false,\n      currentPos: 0,\n      duration: 0,\n      play: false\n    };\n    this.source = audioContext.createBufferSource();\n    this.sourceStarted = false;\n    this.gainNode = audioContext.createGain();\n    this.gainNode.connect(audioContext.destination);\n    this.togglePlay = this.togglePlay.bind(this);\n  }\n\n  smoothAlgorithm(val) {\n    return Math.pow(val / 100, Math.log(10) / Math.log(2));\n  }\n\n  getSound() {\n    this.source = audioContext.createBufferSource();\n    var url = \"http://172.18.86.35:5001/sound\";\n    var request = new XMLHttpRequest();\n    request.open(\"GET\", url, true);\n    request.responseType = \"arraybuffer\";\n    var a = this;\n\n    request.onload = () => {\n      console.log(request.response);\n      audioContext.decodeAudioData(request.response).then(function (data) {\n        a.source.buffer = data;\n        a.source.connect(a.gainNode);\n\n        if (a.state.play && !a.sourceStarted) {\n          a.source.start(0, a.state.currentPos);\n          a.sourceStarted = true;\n        }\n      }, e => {\n        throw e;\n      });\n    };\n\n    request.send();\n  }\n\n  setNewSource() {\n    console.log(\"setting new source...\");\n\n    if (this.sourceStarted) {\n      this.source.stop();\n      this.sourceStarted = false;\n    }\n\n    var oldSource = this.source;\n    this.source = audioContext.createBufferSource();\n    this.source.buffer = oldSource.buffer;\n    this.source.connect(this.gainNode);\n  }\n\n  startPlay() {\n    this.getSound();\n  }\n\n  togglePlay() {\n    var url = \"http://172.18.86.35:5001/togglepause\";\n    this.setState({\n      play: !this.state.play\n    }, () => {\n      this.playSoundLoop();\n      var request = new XMLHttpRequest();\n      request.open(\"GET\", url, true);\n      request.send();\n    });\n  }\n\n  playSoundLoop() {\n    var elem = document.getElementById(\"toggleButton\");\n\n    if (this.state.play) {\n      this.setNewSource();\n      this.source.start(0, this.state.currentPos);\n      this.sourceStarted = true;\n      elem.innerHTML = 'Stop';\n    } else {\n      if (this.sourceStarted) {\n        this.source.stop();\n        this.sourceStarted = false;\n      }\n\n      elem.innerHTML = 'Start';\n    }\n  }\n\n  componentDidMount() {\n    client.onopen = () => {\n      console.log('WebSocket Client Connected');\n    };\n\n    client.onmessage = message => {\n      const dataFromServer = JSON.parse(message.data);\n\n      if (dataFromServer.volume !== undefined) {\n        this.setState({\n          volume: dataFromServer.volume\n        });\n      }\n\n      if (dataFromServer.playRate !== undefined) {\n        this.setState({\n          playRate: dataFromServer.playRate\n        });\n      }\n\n      if (dataFromServer.playedQueue !== undefined) {\n        this.setState({\n          playedQueue: dataFromServer.playedQueue\n        });\n      }\n\n      if (dataFromServer.unplayedQueue !== undefined) {\n        this.setState({\n          unplayedQueue: dataFromServer.unplayedQueue\n        });\n      }\n\n      if (dataFromServer.currentPos !== undefined) {\n        this.setState({\n          currentPos: dataFromServer.currentPos\n        });\n      }\n\n      if (dataFromServer.duration !== undefined) {\n        this.setState({\n          duration: dataFromServer.duration\n        });\n      }\n\n      if (dataFromServer.play !== undefined) {\n        //\t    \tif (this.state.play !== dataFromServer.play) {\n        //\t    \t\tif (this.state.play) {\n        //\t    \t\t\tthis.setNewSource(true);\n        //\t    \t\t}\n        //\t    \t\telse {\n        //\t    \t\t\tthis.source.start();\n        //\t    \t\t}\n        //\t    \t}\n        this.setState({\n          play: dataFromServer.play\n        });\n      }\n\n      if (dataFromServer.update !== undefined) {\n        if (dataFromServer.update) {\n          console.log(this);\n          this.playSoundLoop(); //\t    \t\tthis.setNewSource();\n          //\t\t    \tif (this.state.play) {\n          //\t\t    \t\tvar pos = this.state.currentPos;\n          //\t\t    \t\tconsole.log(this.state.currentPos);\n          //\t    \t\t\tthis.source.start(0, pos);\n          //\t\t    \t\tthis.sourceStarted = true;\n          //\t\t    \t}\n        }\n      }\n\n      if (dataFromServer.newSong !== undefined) {\n        if (dataFromServer.newSong) {\n          this.source.stop();\n          this.getSound();\n        }\n      }\n\n      this.setState({\n        requestCompleted: true\n      });\n    };\n  }\n\n  render() {\n    if (this.state.requestCompleted) {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, React.createElement(VolumeSlider, {\n        gainNode: this.gainNode,\n        volume: this.state.volume,\n        client: client,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: \"50%\",\n          width: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        id: \"startButton\",\n        type: \"button\",\n        onClick: (e, val) => {\n          this.startPlay();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, \"Begin\")), React.createElement(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: \"90%\",\n          width: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, React.createElement(PlayBackSlider, {\n        play: this.state.play,\n        currentPos: this.state.currentPos,\n        duration: this.state.duration,\n        client: client,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        id: \"toggleButton\",\n        type: \"button\",\n        onClick: (e, val) => {\n          this.togglePlay();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, \"Stop\"))), React.createElement(\"div\", {\n        className: \"Upload\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, React.createElement(Upload, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      })), React.createElement(TrackList, {\n        playedQueue: this.state.playedQueue,\n        unplayedQueue: this.state.unplayedQueue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }));\n    } else {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, \"Loading...\");\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/if994249/eclipse-workspace/song-drop/song-drop-app/src/App.js"],"names":["React","Component","w3cwebsocket","W3CWebSocket","PlayRateSlider","VolumeSlider","PlayBackSlider","Upload","TrackList","AudioContext","window","webkitAudioContext","audioContext","client","App","constructor","props","state","volume","playedQueue","unplayedQueue","requestCompleted","currentPos","duration","play","source","createBufferSource","sourceStarted","gainNode","createGain","connect","destination","togglePlay","bind","smoothAlgorithm","val","Math","pow","log","getSound","url","request","XMLHttpRequest","open","responseType","a","onload","console","response","decodeAudioData","then","data","buffer","start","e","send","setNewSource","stop","oldSource","startPlay","setState","playSoundLoop","elem","document","getElementById","innerHTML","componentDidMount","onopen","onmessage","message","dataFromServer","JSON","parse","undefined","playRate","update","newSong","render","position","top","width"],"mappings":"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","sourcesContent":["// src/App.js\r\n\r\nimport React, { Component } from \"react\";\r\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\r\nimport './App.css';\r\n\r\nimport PlayRateSlider from './control-sliders/PlayRateSlider';\r\nimport VolumeSlider from './control-sliders/VolumeSlider';\r\nimport PlayBackSlider from './control-sliders/PlayBackSlider';\r\nimport Upload from './Upload';\r\nimport TrackList from './track-list/TrackList';\r\n\r\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\r\nconst audioContext = new AudioContext();\r\n\r\nconst client = new W3CWebSocket('ws://172.18.86.35:5000');\r\n\r\nclass App extends Component {\r\n\t\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    \tvolume: 0,\r\n    \tplayedQueue: null,\r\n    \tunplayedQueue: null,\r\n    \trequestCompleted: false,\r\n    \tcurrentPos: 0,\r\n    \tduration: 0,\r\n    \tplay: false\r\n    };\r\n    \r\n    this.source = audioContext.createBufferSource();\r\n    this.sourceStarted = false;\r\n    \r\n    this.gainNode = audioContext.createGain();\r\n    this.gainNode.connect(audioContext.destination);\r\n    \r\n    this.togglePlay = this.togglePlay.bind(this);\r\n  }\r\n  \r\n  smoothAlgorithm(val) {\r\n\treturn Math.pow((val / 100), (Math.log(10) / Math.log(2)));\r\n  }\r\n  \r\n  getSound() {\r\n\t  this.source = audioContext.createBufferSource();\r\n\t  \r\n\t  var url = \"http://172.18.86.35:5001/sound\"\r\n      var request = new XMLHttpRequest();\r\n\t  request.open(\"GET\", url, true);\r\n\t  request.responseType = \"arraybuffer\";\r\n\t  var a = this;\t \r\n\t  request.onload = () => {\r\n\t\t  console.log(request.response);\r\n\t\t  audioContext.decodeAudioData(request.response).then(function (data) {\r\n\t\t\t  a.source.buffer = data;\r\n\t\t\t  a.source.connect(a.gainNode);\r\n\t\t\t  if (a.state.play && !a.sourceStarted) {\r\n\t\t\t\t  a.source.start(0, a.state.currentPos);\r\n\t\t\t\t  a.sourceStarted = true;\r\n\t\t\t  }\r\n\t\t  }, (e) => { throw (e); });\r\n  \t  }\r\n\t  request.send();\r\n  }\r\n  \r\n  setNewSource() {\r\n\t  console.log(\"setting new source...\")\r\n\t  if (this.sourceStarted) {\r\n\t\t  this.source.stop();\r\n\t\t  this.sourceStarted = false;\r\n\t  }\r\n\t  var oldSource = this.source;\r\n\t  this.source = audioContext.createBufferSource();\r\n\t  this.source.buffer = oldSource.buffer;\r\n\t  this.source.connect(this.gainNode);\r\n  }\r\n  \r\n  startPlay() {\r\n\t  this.getSound();\r\n  }\r\n  \r\n  togglePlay() {\r\n\t  var url = \"http://172.18.86.35:5001/togglepause\";\r\n\t  this.setState({\r\n\t\t  play: !this.state.play\r\n\t  }, () => {\r\n\t\t  this.playSoundLoop();\r\n\t\t  var request = new XMLHttpRequest();\r\n\t\t  request.open(\"GET\", url, true);\r\n\t\t  request.send();\r\n\t  })\r\n  }\r\n  \r\n  playSoundLoop() {\r\n\tvar elem = document.getElementById(\"toggleButton\");\r\n\tif (this.state.play) {\r\n\t\tthis.setNewSource();\r\n\t\tthis.source.start(0, this.state.currentPos); \r\n\t\tthis.sourceStarted = true;\r\n\t\telem.innerHTML = 'Stop';\r\n\t}\r\n\telse {\r\n\t\tif (this.sourceStarted) {\r\n\t\t\tthis.source.stop();\r\n\t\t\tthis.sourceStarted = false;\r\n\t\t}\r\n\t\telem.innerHTML = 'Start';\r\n\t}\r\n  }\r\n  \r\n  componentDidMount() {\r\n\t  client.onopen = () => {\r\n\t   console.log('WebSocket Client Connected');\r\n\t  };\r\n\t  client.onmessage = (message) => {\r\n\t    const dataFromServer = JSON.parse(message.data);\r\n\t    if (dataFromServer.volume !== undefined) {\r\n\t    \tthis.setState({ volume: dataFromServer.volume });\t    \t\r\n\t    }\r\n\t    if (dataFromServer.playRate !== undefined) {\r\n\t    \tthis.setState({ playRate: dataFromServer.playRate });\t    \t\r\n\t    }\r\n\t    if (dataFromServer.playedQueue !== undefined) {\r\n\t    \tthis.setState({ playedQueue: dataFromServer.playedQueue });    \t\r\n\t    }\r\n\t    if (dataFromServer.unplayedQueue !== undefined) {\r\n\t    \tthis.setState({ unplayedQueue: dataFromServer.unplayedQueue });    \t\r\n\t    }\r\n\t    \r\n\t    if (dataFromServer.currentPos !== undefined) {\r\n\t    \tthis.setState({ currentPos: dataFromServer.currentPos });\r\n\t    }\r\n\t    if (dataFromServer.duration !== undefined) {\r\n\t    \tthis.setState({ duration: dataFromServer.duration });\r\n\t    }\r\n\t    if (dataFromServer.play !== undefined) {\r\n//\t    \tif (this.state.play !== dataFromServer.play) {\r\n//\t    \t\tif (this.state.play) {\r\n//\t    \t\t\tthis.setNewSource(true);\r\n//\t    \t\t}\r\n//\t    \t\telse {\r\n//\t    \t\t\tthis.source.start();\r\n//\t    \t\t}\r\n//\t    \t}\r\n\t    \tthis.setState({ play: dataFromServer.play });\r\n\t    }\r\n\t    if (dataFromServer.update !== undefined) {\r\n\t    \tif (dataFromServer.update) {\r\n\t    \t\tconsole.log(this);\r\n\t    \t\tthis.playSoundLoop();\r\n//\t    \t\tthis.setNewSource();\r\n//\t\t    \tif (this.state.play) {\r\n//\t\t    \t\tvar pos = this.state.currentPos;\r\n//\t\t    \t\tconsole.log(this.state.currentPos);\r\n//\t    \t\t\tthis.source.start(0, pos);\r\n//\t\t    \t\tthis.sourceStarted = true;\r\n//\t\t    \t}\r\n\t    \t}\r\n\t    }\r\n\t    if (dataFromServer.newSong !== undefined) {\r\n\t    \tif (dataFromServer.newSong) {\r\n\t    \t\tthis.source.stop();\r\n\t    \t\tthis.getSound();\r\n\t    \t}\r\n\t    }\r\n\t    this.setState({ requestCompleted: true });\r\n\t  };\r\n\t}  \r\n  \r\n  render() {\r\n\tif (this.state.requestCompleted) {\r\n\t\treturn (\r\n\t      <div className=\"App\">\r\n\t        <center>\r\n\t          <VolumeSlider gainNode={this.gainNode} volume={this.state.volume} client={client}/>\r\n\t          <div style={{position: \"absolute\", top: \"50%\", width: \"100%\"}}>\r\n\t          \t<button id=\"startButton\" type=\"button\" onClick={(e, val) => {this.startPlay();}}>Begin</button>\r\n\t          </div>\r\n\t          <div style={{position: \"absolute\", top: \"90%\", width: \"100%\"}}>\r\n\t          \t<PlayBackSlider play={this.state.play} currentPos={this.state.currentPos} duration={this.state.duration} client={client}/>\r\n\t          \t<button id=\"toggleButton\" type=\"button\" onClick={(e, val) => { this.togglePlay(); }}>Stop</button>\r\n\t          </div>\r\n\t        </center>\r\n\t        <div className=\"Upload\">\r\n\t          <Upload />\r\n\t        </div>\r\n\t        <TrackList playedQueue={this.state.playedQueue} unplayedQueue={this.state.unplayedQueue}/>\r\n\t      </div>\r\n\t    );\r\n\t}\r\n\telse {\r\n\t\treturn (\r\n\t\t\t<div>Loading...</div>\r\n\t\t)\r\n\t}\r\n  }\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}