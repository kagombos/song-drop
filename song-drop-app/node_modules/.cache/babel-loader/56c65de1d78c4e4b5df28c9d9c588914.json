{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\if994249\\\\eclipse-workspace\\\\song-drop\\\\song-drop-app\\\\src\\\\App.js\";\n// src/App.js\nimport React, { Component } from \"react\";\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport './App.css';\nimport PlayRateSlider from './control-sliders/PlayRateSlider';\nimport VolumeSlider from './control-sliders/VolumeSlider';\nimport PlayBackSlider from './control-sliders/PlayBackSlider';\nimport Upload from './Upload';\nimport TrackList from './track-list/TrackList';\nimport properties from './properties';\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\nconst audioContext = new AudioContext();\nconst client = new W3CWebSocket(properties.webSocketAddress);\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      volume: 0,\n      playedQueue: null,\n      unplayedQueue: null,\n      requestCompleted: false,\n      currentPos: 0,\n      duration: 0,\n      play: false,\n      songName: \"test\"\n    };\n    this.nextBuffer = null;\n    this.source = audioContext.createBufferSource();\n    this.sourceStarted = false;\n    this.gainNode = audioContext.createGain();\n    this.gainNode.connect(audioContext.destination);\n    this.togglePlay = this.togglePlay.bind(this);\n  }\n\n  smoothAlgorithm(val) {\n    return Math.pow(val / 100, Math.log(10) / Math.log(2));\n  }\n\n  getSound(useNextBuffer) {\n    this.source = audioContext.createBufferSource();\n\n    if (useNextBuffer && this.nextBuffer !== null && this.nextBuffer !== undefined) {\n      this.source.buffer = this.nextBuffer;\n      this.nextBuffer = null;\n      this.source.connect(this.gainNode);\n      this.playSoundLoop();\n    } else {\n      var url = properties.serverAddress + \"/sound\";\n      var request = new XMLHttpRequest();\n      request.open(\"GET\", url, true);\n      request.responseType = \"arraybuffer\";\n      var a = this;\n\n      request.onloadend = () => {\n        audioContext.decodeAudioData(request.response).then(data => {\n          a.source.buffer = data;\n          a.source.connect(a.gainNode);\n          a.playSoundLoop();\n        }, e => {\n          console.log(e);\n        });\n      };\n\n      request.send();\n    }\n  }\n\n  getNextBuffer() {\n    var url = properties.serverAddress + \"/sound?next=true\";\n    var request = new XMLHttpRequest();\n    request.open(\"GET\", url, true);\n    request.responseType = \"arraybuffer\";\n    var a = this;\n\n    request.onloadend = () => {\n      audioContext.decodeAudioData(request.response).then(data => {\n        a.nextBuffer = data;\n      }, e => {\n        console.log(e);\n      });\n    };\n\n    request.send();\n  }\n\n  setNewSource() {\n    if (this.sourceStarted) {\n      this.source.stop();\n      this.sourceStarted = false;\n    }\n\n    var oldSource = this.source;\n    this.source = audioContext.createBufferSource();\n    this.source.buffer = oldSource.buffer;\n    this.source.connect(this.gainNode);\n  }\n\n  startPlay() {\n    this.getSound(true);\n    this.getNextBuffer();\n  }\n\n  togglePlay() {\n    var url = properties.serverAddress + \"/togglepause\";\n    this.setState({\n      play: !this.state.play\n    }, () => {\n      client.send(JSON.stringify({\n        play: this.state.play\n      }));\n    });\n  }\n\n  skip() {\n    client.send(JSON.stringify({\n      currentPos: this.state.duration\n    }));\n  }\n\n  playSoundLoop() {\n    var elem = document.getElementById(\"toggleButton\");\n\n    if (this.state.play) {\n      this.setNewSource();\n      this.source.start(0, this.state.currentPos);\n      this.sourceStarted = true;\n      elem.innerHTML = 'Stop';\n    } else {\n      if (this.sourceStarted) {\n        this.source.stop();\n        this.sourceStarted = false;\n      }\n\n      elem.innerHTML = 'Start';\n    }\n  }\n\n  componentDidMount() {\n    client.onopen = () => {\n      console.log('WebSocket Client Connected');\n    };\n\n    client.onmessage = message => {\n      const dataFromServer = JSON.parse(message.data);\n\n      if (dataFromServer.volume !== undefined) {\n        this.setState({\n          volume: dataFromServer.volume\n        });\n      }\n\n      if (dataFromServer.playedQueue !== undefined) {\n        this.setState({\n          playedQueue: dataFromServer.playedQueue\n        });\n      }\n\n      if (dataFromServer.unplayedQueue !== undefined) {\n        this.setState({\n          unplayedQueue: dataFromServer.unplayedQueue\n        });\n      }\n\n      if (dataFromServer.songName !== undefined) {\n        this.setState({\n          songName: dataFromServer.songName\n        });\n      }\n\n      if (dataFromServer.currentPos !== undefined) {\n        this.setState({\n          currentPos: dataFromServer.currentPos\n        });\n      }\n\n      if (dataFromServer.duration !== undefined) {\n        this.setState({\n          duration: dataFromServer.duration\n        });\n      }\n\n      if (dataFromServer.play !== undefined) {\n        this.setState({\n          play: dataFromServer.play\n        });\n      }\n\n      if (dataFromServer.update !== undefined && dataFromServer.update !== \"\") {\n        console.log(dataFromServer.update);\n\n        if (dataFromServer.update === \"pos\") {\n          this.playSoundLoop();\n        }\n\n        if (dataFromServer.update === \"pause\") {\n          this.setState({\n            play: dataFromServer.play\n          }, () => {\n            this.playSoundLoop();\n          });\n        }\n\n        if (dataFromServer.update === \"next\") {\n          this.getNextBuffer();\n        }\n      }\n\n      if (dataFromServer.newSong !== undefined) {\n        if (dataFromServer.newSong) {\n          if (this.state.play) {\n            this.source.stop();\n            this.sourceStarted = false;\n          }\n\n          this.getSound(true);\n        }\n      }\n\n      this.setState({\n        requestCompleted: true\n      });\n    };\n  }\n\n  render() {\n    if (this.state.requestCompleted) {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(VolumeSlider, {\n        gainNode: this.gainNode,\n        volume: this.state.volume,\n        client: client,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: \"50%\",\n          width: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        id: \"startButton\",\n        type: \"button\",\n        onClick: (e, val) => {\n          this.startPlay();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, \"Begin\")), React.createElement(\"center\", {\n        className: \"player\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, this.state.songName), React.createElement(PlayBackSlider, {\n        play: this.state.play,\n        currentPos: this.state.currentPos,\n        duration: this.state.duration,\n        client: client,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        id: \"toggleButton\",\n        type: \"button\",\n        onClick: (e, val) => {\n          this.togglePlay();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, \"Stop\"), React.createElement(\"button\", {\n        id: \"skip\",\n        type: \"button\",\n        onClick: (e, val) => {\n          this.skip();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, \"Skip\"))), React.createElement(\"div\", {\n        className: \"Upload\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, React.createElement(Upload, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      })), React.createElement(TrackList, {\n        playedQueue: this.state.playedQueue,\n        unplayedQueue: this.state.unplayedQueue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }));\n    } else {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, \"Loading...\");\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/if994249/eclipse-workspace/song-drop/song-drop-app/src/App.js"],"names":["React","Component","w3cwebsocket","W3CWebSocket","PlayRateSlider","VolumeSlider","PlayBackSlider","Upload","TrackList","properties","AudioContext","window","webkitAudioContext","audioContext","client","webSocketAddress","App","constructor","props","state","volume","playedQueue","unplayedQueue","requestCompleted","currentPos","duration","play","songName","nextBuffer","source","createBufferSource","sourceStarted","gainNode","createGain","connect","destination","togglePlay","bind","smoothAlgorithm","val","Math","pow","log","getSound","useNextBuffer","undefined","buffer","playSoundLoop","url","serverAddress","request","XMLHttpRequest","open","responseType","a","onloadend","decodeAudioData","response","then","data","e","console","send","getNextBuffer","setNewSource","stop","oldSource","startPlay","setState","JSON","stringify","skip","elem","document","getElementById","start","innerHTML","componentDidMount","onopen","onmessage","message","dataFromServer","parse","update","newSong","render","position","top","width"],"mappings":"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","sourcesContent":["// src/App.js\r\n\r\nimport React, { Component } from \"react\";\r\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\r\nimport './App.css';\r\n\r\nimport PlayRateSlider from './control-sliders/PlayRateSlider';\r\nimport VolumeSlider from './control-sliders/VolumeSlider';\r\nimport PlayBackSlider from './control-sliders/PlayBackSlider';\r\nimport Upload from './Upload';\r\nimport TrackList from './track-list/TrackList';\r\nimport properties from './properties';\r\n\r\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\r\nconst audioContext = new AudioContext();\r\n\r\nconst client = new W3CWebSocket(properties.webSocketAddress);\r\n\r\nclass App extends Component {\r\n\t\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    \tvolume: 0,\r\n    \tplayedQueue: null,\r\n    \tunplayedQueue: null,\r\n    \trequestCompleted: false,\r\n    \tcurrentPos: 0,\r\n    \tduration: 0,\r\n    \tplay: false,\r\n    \tsongName: \"test\"\r\n    };\r\n    \r\n    this.nextBuffer = null;\r\n    \r\n    this.source = audioContext.createBufferSource();\r\n    this.sourceStarted = false;\r\n    \r\n    this.gainNode = audioContext.createGain();\r\n    this.gainNode.connect(audioContext.destination);\r\n    \r\n    this.togglePlay = this.togglePlay.bind(this);\r\n  }\r\n  \r\n  smoothAlgorithm(val) {\r\n\treturn Math.pow((val / 100), (Math.log(10) / Math.log(2)));\r\n  }\r\n  \r\n  getSound(useNextBuffer) {\r\n\t  this.source = audioContext.createBufferSource();\r\n\t  if (useNextBuffer && this.nextBuffer !== null && this.nextBuffer !== undefined) {\r\n\t\t  this.source.buffer = this.nextBuffer;\r\n\t\t  this.nextBuffer = null;\r\n\t\t  this.source.connect(this.gainNode);\r\n\t\t  this.playSoundLoop();\r\n\t  }\r\n\t  else {\r\n\t\t  var url = properties.serverAddress + \"/sound\"\r\n\t      var request = new XMLHttpRequest();\r\n\t\t  request.open(\"GET\", url, true);\r\n\t\t  request.responseType = \"arraybuffer\";\r\n\t\t  var a = this;\r\n\t\t  request.onloadend = () => {\r\n\t\t\t  audioContext.decodeAudioData(request.response).then((data) => {\r\n\t\t\t\t  a.source.buffer = data;\r\n\t\t\t\t  a.source.connect(a.gainNode);\r\n\t\t\t\t  a.playSoundLoop();\r\n\t\t\t  }, (e) => { console.log(e); });\r\n\t  \t  }\r\n\t\t  request.send();\r\n\t  }\r\n  }\r\n  \r\n  getNextBuffer() {\r\n\t  var url = properties.serverAddress + \"/sound?next=true\"\r\n\t  var request = new XMLHttpRequest();\r\n\t  request.open(\"GET\", url, true);\r\n\t  request.responseType = \"arraybuffer\";\r\n\t  var a = this;\r\n\t  request.onloadend = () => {\r\n\t\t  audioContext.decodeAudioData(request.response).then((data) => {\r\n\t\t\t  a.nextBuffer = data;\r\n\t\t  }, (e) => {console.log(e); });\r\n\t  }\r\n\t  request.send();\r\n  }\r\n  \r\n  setNewSource() {\r\n\t  if (this.sourceStarted) {\r\n\t\t  this.source.stop();\r\n\t\t  this.sourceStarted = false;\r\n\t  }\r\n\t  var oldSource = this.source;\r\n\t  this.source = audioContext.createBufferSource();\r\n\t  this.source.buffer = oldSource.buffer;\r\n\t  this.source.connect(this.gainNode);\r\n  }\r\n  \r\n  startPlay() {\r\n\t  this.getSound(true);\r\n\t  this.getNextBuffer();\r\n  }\r\n  \r\n  togglePlay() {\r\n\t  var url = properties.serverAddress + \"/togglepause\";\r\n\t  this.setState({\r\n\t\t  play: !this.state.play\r\n\t  }, () => {\r\n\t\t  client.send(JSON.stringify({ play: this.state.play }));\r\n\t  })\r\n  }\r\n  skip() {\r\n\t  client.send(JSON.stringify({ currentPos: this.state.duration }));\r\n  }\r\n  \r\n  playSoundLoop() {\r\n\tvar elem = document.getElementById(\"toggleButton\");\r\n\tif (this.state.play) {\r\n\t\tthis.setNewSource();\r\n\t\tthis.source.start(0, this.state.currentPos); \r\n\t\tthis.sourceStarted = true;\r\n\t\telem.innerHTML = 'Stop';\r\n\t}\r\n\telse {\r\n\t\tif (this.sourceStarted) {\r\n\t\t\tthis.source.stop();\r\n\t\t\tthis.sourceStarted = false;\r\n\t\t}\r\n\t\telem.innerHTML = 'Start';\r\n\t}\r\n  }\r\n  \r\n  componentDidMount() {\r\n\t  client.onopen = () => {\r\n\t   console.log('WebSocket Client Connected');\r\n\t  };\r\n\t  client.onmessage = (message) => {\r\n\t    const dataFromServer = JSON.parse(message.data);\r\n\t    if (dataFromServer.volume !== undefined) {\r\n\t    \tthis.setState({ volume: dataFromServer.volume });\t    \t\r\n\t    }\r\n\t    if (dataFromServer.playedQueue !== undefined) {\r\n\t    \tthis.setState({ playedQueue: dataFromServer.playedQueue });    \t\r\n\t    }\r\n\t    if (dataFromServer.unplayedQueue !== undefined) {\r\n\t    \tthis.setState({ unplayedQueue: dataFromServer.unplayedQueue });    \t\r\n\t    }\r\n\t    \r\n\t    if (dataFromServer.songName !== undefined) {\r\n\t    \tthis.setState({ songName: dataFromServer.songName });\r\n\t    }\r\n\t    if (dataFromServer.currentPos !== undefined) {\r\n\t    \tthis.setState({ currentPos: dataFromServer.currentPos });\r\n\t    }\r\n\t    if (dataFromServer.duration !== undefined) {\r\n\t    \tthis.setState({ duration: dataFromServer.duration });\r\n\t    }\r\n\t    if (dataFromServer.play !== undefined) {\r\n\t    \tthis.setState({ play: dataFromServer.play });\r\n\t    }\r\n\t    if (dataFromServer.update !== undefined && dataFromServer.update !== \"\") {\r\n\t    \tconsole.log(dataFromServer.update);\r\n\t    \tif (dataFromServer.update === \"pos\") {\r\n\t    \t\tthis.playSoundLoop();\r\n\t    \t}\r\n\t    \tif (dataFromServer.update === \"pause\") {\r\n\t    \t\tthis.setState({ play: dataFromServer.play }, () => {\r\n\t    \t\t\tthis.playSoundLoop();\r\n\t    \t\t});\r\n\t    \t}\r\n\t    \tif (dataFromServer.update === \"next\") {\r\n\t    \t\tthis.getNextBuffer();\r\n\t    \t}\r\n\t    }\r\n\t    if (dataFromServer.newSong !== undefined) {\r\n\t    \tif (dataFromServer.newSong) {\r\n\t    \t\tif (this.state.play) {\r\n\t    \t\t\tthis.source.stop();\r\n\t\t    \t\tthis.sourceStarted = false;\r\n\t    \t\t}\r\n\t    \t\tthis.getSound(true);\r\n\t    \t}\r\n\t    }\r\n\t    this.setState({ requestCompleted: true });\r\n\t  };\r\n\t}  \r\n  \r\n  render() {\r\n\tif (this.state.requestCompleted) {\r\n\t\treturn (\r\n\t      <div className=\"App\">\r\n\t        <center>\r\n\t          <VolumeSlider gainNode={this.gainNode} volume={this.state.volume} client={client}/>\r\n\t          <div style={{position: \"absolute\", top: \"50%\", width: \"100%\"}}>\r\n\t          \t<button id=\"startButton\" type=\"button\" onClick={(e, val) => {this.startPlay();}}>Begin</button>\r\n\t          </div>\r\n\t          <center className=\"player\">\r\n\t          \t<p>{this.state.songName}</p>\r\n\t          \t<PlayBackSlider play={this.state.play} currentPos={this.state.currentPos} duration={this.state.duration} client={client}/>\r\n\t          \t<button id=\"toggleButton\" type=\"button\" onClick={(e, val) => { this.togglePlay(); }}>Stop</button>\r\n\t          \t<button id=\"skip\" type=\"button\" onClick={(e, val) => { this.skip(); }}>Skip</button>\r\n\t          </center>\r\n\t        </center>\r\n\t        <div className=\"Upload\">\r\n\t          <Upload />\r\n\t        </div>\r\n\t        <TrackList playedQueue={this.state.playedQueue} unplayedQueue={this.state.unplayedQueue}/>\r\n\t      </div>\r\n\t    );\r\n\t}\r\n\telse {\r\n\t\treturn (\r\n\t\t\t<div>Loading...</div>\r\n\t\t)\r\n\t}\r\n  }\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}