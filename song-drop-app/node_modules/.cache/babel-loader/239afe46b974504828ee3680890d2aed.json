{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\if994249\\\\eclipse-workspace\\\\song-drop\\\\song-drop-app\\\\src\\\\Upload.js\";\nimport React, { Component } from \"react\";\nimport Dropzone from './dropzone/Dropzone';\nimport properties from './properties';\n\nclass Upload extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      files: [],\n      youtubeLink: \"\"\n    };\n    this.uploadFiles = this.uploadFiles.bind(this);\n    this.sendRequest = this.sendRequest.bind(this);\n    this.onFilesAdded = this.onFilesAdded.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  onFilesAdded(files) {\n    this.setState(prevState => ({\n      files: prevState.files.concat(files)\n    }));\n    setTimeout(() => {\n      console.log(this.state.files);\n      this.uploadFiles();\n    }, 0);\n  }\n\n  async uploadFiles() {\n    const promises = [];\n    this.state.files.forEach(file => {\n      promises.push(this.sendRequest(file));\n      console.log(promises);\n    });\n\n    try {\n      await Promise.all(promises);\n      this.setState({\n        files: undefined\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  sendRequest(file) {\n    return new Promise((res, rej) => {\n      const req = new XMLHttpRequest();\n      const formData = new FormData();\n      formData.append(\"file\", file, file.name);\n      req.open(\"POST\", properties.serverAddress + \"/upload\");\n      req.send(formData);\n    });\n  }\n\n  getParameterByName(name, url) {\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\n    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),\n        results = regex.exec(url);\n    if (!results) return null;\n    if (!results[2]) return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n  }\n\n  sendYoutubeRequest() {\n    var link = this.getParameterByName(\"v\", this.state.youtubeLink);\n    const req = new XMLHttpRequest();\n\n    if (link === \"\" || link === null) {\n      req.open(\"POST\", properties.serverAddress + \"/upload?link=\" + this.state.youtubeLink);\n    } else {\n      req.open(\"POST\", properties.serverAddress + \"/upload?link=\" + link);\n    }\n\n    req.send();\n  }\n\n  handleChange(event) {\n    this.setState({\n      youtubeLink: event.target.value\n    });\n  }\n\n  render() {\n    return React.createElement(\"center\", {\n      style: {\n        border: \"solid 1px black\",\n        backgroundColor: \"#67779e\",\n        padding: \"20px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(Dropzone, {\n      onFilesAdded: this.onFilesAdded,\n      disabled: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        alignItems: \"center\",\n        justifyContent: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      style: {\n        display: \"block\",\n        margin: \"5px\"\n      },\n      value: this.state.youtubeLink,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      style: {\n        display: \"block\",\n        margin: \"5px\"\n      },\n      type: \"button\",\n      onClick: (e, val) => {\n        this.sendYoutubeRequest();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"Download Youtube video\")));\n  }\n\n}\n\nexport default Upload;","map":{"version":3,"sources":["C:/Users/if994249/eclipse-workspace/song-drop/song-drop-app/src/Upload.js"],"names":["React","Component","Dropzone","properties","Upload","constructor","props","state","files","youtubeLink","uploadFiles","bind","sendRequest","onFilesAdded","handleChange","setState","prevState","concat","setTimeout","console","log","promises","forEach","file","push","Promise","all","undefined","e","res","rej","req","XMLHttpRequest","formData","FormData","append","name","open","serverAddress","send","getParameterByName","url","replace","regex","RegExp","results","exec","decodeURIComponent","sendYoutubeRequest","link","event","target","value","render","border","backgroundColor","padding","alignItems","justifyContent","display","margin","val"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Dropzone from './dropzone/Dropzone';\r\nimport properties from './properties';\r\n\r\nclass Upload extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      files: [],\r\n      youtubeLink: \"\"\r\n    };\r\n    \r\n    this.uploadFiles = this.uploadFiles.bind(this);\r\n    this.sendRequest = this.sendRequest.bind(this);\r\n    this.onFilesAdded = this.onFilesAdded.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n  \r\n  onFilesAdded(files) {\r\n    this.setState(prevState => ({\r\n      files: prevState.files.concat(files)\r\n    }));\r\n    setTimeout(() => { console.log(this.state.files); this.uploadFiles(); }, 0);\r\n  }\r\n\r\n  async uploadFiles() {\r\n    const promises = [];\r\n    this.state.files.forEach(file => {\r\n      promises.push(this.sendRequest(file));\r\n      console.log(promises);\r\n    });\r\n    try {\r\n      await Promise.all(promises);\r\n      this.setState({ files: undefined });\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n  \r\n  sendRequest(file) {\r\n    return new Promise((res, rej) => {\r\n      const req = new XMLHttpRequest();\r\n      \r\n      const formData = new FormData();\r\n      formData.append(\"file\", file, file.name);\r\n      \r\n      req.open(\"POST\", properties.serverAddress + \"/upload\");\r\n      req.send(formData);\r\n    });\r\n  }\r\n  \r\n  getParameterByName(name, url) {\r\n\t    name = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n\t    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),\r\n\t        results = regex.exec(url);\r\n\t    if (!results) return null;\r\n\t    if (!results[2]) return '';\r\n\t    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n\t}\r\n  \r\n  sendYoutubeRequest() {\r\n\t  var link = this.getParameterByName(\"v\", this.state.youtubeLink);\r\n\t  const req = new XMLHttpRequest();\t  \r\n\t  if (link === \"\" || link === null) {\r\n\t\t  req.open(\"POST\", properties.serverAddress + \"/upload?link=\" + this.state.youtubeLink);\r\n\t  }\r\n\t  else {\r\n\t\t  req.open(\"POST\", properties.serverAddress + \"/upload?link=\" + link);\r\n\t  }\r\n\t  req.send();\r\n  }\r\n  \r\n  handleChange(event) {\r\n\t  this.setState({youtubeLink: event.target.value});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <center style={{border: \"solid 1px black\", backgroundColor: \"#67779e\", padding: \"20px\"}}>\r\n      \t<Dropzone onFilesAdded={this.onFilesAdded} disabled={false} />\r\n      \t<div style={{alignItems: \"center\", justifyContent: \"center\"}}>\r\n      \t  <input style={{display: \"block\", margin: \"5px\"}} value={this.state.youtubeLink} onChange={this.handleChange}/>\r\n      \t  <button style={{display: \"block\", margin: \"5px\"}} type=\"button\" onClick={(e, val) => { this.sendYoutubeRequest(); }}>Download Youtube video</button>\r\n      \t</div>\r\n      </center>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Upload;"]},"metadata":{},"sourceType":"module"}