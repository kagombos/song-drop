{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\if994249\\\\eclipse-workspace\\\\song-drop\\\\song-drop-app\\\\src\\\\App.js\";\n// src/App.js\nimport React, { Component } from \"react\";\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport './App.css';\nimport PlayRateSlider from './control-sliders/PlayRateSlider';\nimport VolumeSlider from './control-sliders/VolumeSlider';\nimport PlayBackSlider from './control-sliders/PlayBackSlider';\nimport Upload from './Upload';\nimport TrackList from './track-list/TrackList';\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\nconst audioContext = new AudioContext();\nconst client = new W3CWebSocket('ws://172.18.86.35:5000');\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      volume: 0,\n      playedQueue: null,\n      unplayedQueue: null,\n      requestCompleted: false,\n      currentPos: 0,\n      duration: 0,\n      play: false,\n      songName: \"test\"\n    };\n    this.source = audioContext.createBufferSource();\n    this.sourceStarted = false;\n    this.gainNode = audioContext.createGain();\n    this.gainNode.connect(audioContext.destination);\n    this.togglePlay = this.togglePlay.bind(this);\n  }\n\n  smoothAlgorithm(val) {\n    return Math.pow(val / 100, Math.log(10) / Math.log(2));\n  }\n\n  getSound() {\n    this.source = audioContext.createBufferSource();\n    var url = \"http://172.18.86.35:5001/sound\";\n    var request = new XMLHttpRequest();\n    request.open(\"GET\", url, true);\n    request.responseType = \"arraybuffer\";\n    var a = this;\n\n    request.onloadend = () => {\n      audioContext.decodeAudioData(request.response).then(function (data) {\n        a.source.buffer = data;\n        a.source.connect(a.gainNode);\n\n        if (a.state.play && !a.sourceStarted) {\n          a.source.start(0, a.state.currentPos);\n          a.sourceStarted = true;\n        }\n      }, e => {\n        console.log(e);\n      });\n    };\n\n    request.send();\n  }\n\n  setNewSource() {\n    console.log(\"setting new source...\");\n\n    if (this.sourceStarted) {\n      this.source.stop();\n      this.sourceStarted = false;\n    }\n\n    var oldSource = this.source;\n    this.source = audioContext.createBufferSource();\n    this.source.buffer = oldSource.buffer;\n    this.source.connect(this.gainNode);\n  }\n\n  startPlay() {\n    this.getSound();\n  }\n\n  togglePlay() {\n    var url = \"http://172.18.86.35:5001/togglepause\";\n    this.setState({\n      play: !this.state.play\n    }, () => {\n      this.playSoundLoop();\n      client.send(JSON.stringify({\n        play: this.state.play\n      }));\n    });\n  }\n\n  skip() {\n    client.send(JSON.stringify({\n      currentPos: this.state.duration\n    }));\n  }\n\n  playSoundLoop() {\n    var elem = document.getElementById(\"toggleButton\");\n\n    if (this.state.play) {\n      this.setNewSource();\n      this.source.start(0, this.state.currentPos);\n      this.sourceStarted = true;\n      elem.innerHTML = 'Stop';\n    } else {\n      if (this.sourceStarted) {\n        this.source.stop();\n        this.sourceStarted = false;\n      }\n\n      elem.innerHTML = 'Start';\n    }\n  }\n\n  componentDidMount() {\n    client.onopen = () => {\n      console.log('WebSocket Client Connected');\n    };\n\n    client.onmessage = message => {\n      const dataFromServer = JSON.parse(message.data);\n\n      if (dataFromServer.volume !== undefined) {\n        this.setState({\n          volume: dataFromServer.volume\n        });\n      }\n\n      if (dataFromServer.playedQueue !== undefined) {\n        this.setState({\n          playedQueue: dataFromServer.playedQueue\n        });\n      }\n\n      if (dataFromServer.unplayedQueue !== undefined) {\n        this.setState({\n          unplayedQueue: dataFromServer.unplayedQueue\n        });\n      }\n\n      if (dataFromServer.songName !== undefined) {\n        this.setState({\n          songName: dataFromServer.songName\n        });\n      }\n\n      if (dataFromServer.currentPos !== undefined) {\n        this.setState({\n          currentPos: dataFromServer.currentPos\n        });\n      }\n\n      if (dataFromServer.duration !== undefined) {\n        this.setState({\n          duration: dataFromServer.duration\n        });\n      }\n\n      if (dataFromServer.play !== undefined) {\n        this.setState({\n          play: dataFromServer.play\n        });\n      }\n\n      if (dataFromServer.update !== undefined) {\n        if (dataFromServer.update === \"pos\") {\n          this.playSoundLoop();\n        }\n\n        if (dataFromServer.update === \"pause\") {\n          this.setState({\n            play: dataFromServer.play\n          }, () => {\n            this.playSoundLoop();\n          });\n        }\n      }\n\n      if (dataFromServer.newSong !== undefined) {\n        if (dataFromServer.newSong) {\n          if (this.state.play) {\n            this.source.stop();\n            this.sourceStarted = false;\n          }\n\n          this.getSound();\n        }\n      }\n\n      this.setState({\n        requestCompleted: true\n      });\n    };\n  }\n\n  render() {\n    if (this.state.requestCompleted) {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, React.createElement(VolumeSlider, {\n        gainNode: this.gainNode,\n        volume: this.state.volume,\n        client: client,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: \"50%\",\n          width: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        id: \"startButton\",\n        type: \"button\",\n        onClick: (e, val) => {\n          this.startPlay();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, \"Begin\")), React.createElement(\"center\", {\n        className: \"player\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, this.state.songName), React.createElement(PlayBackSlider, {\n        play: this.state.play,\n        currentPos: this.state.currentPos,\n        duration: this.state.duration,\n        client: client,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        id: \"toggleButton\",\n        type: \"button\",\n        onClick: (e, val) => {\n          this.togglePlay();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, \"Stop\"), React.createElement(\"button\", {\n        id: \"skip\",\n        type: \"button\",\n        onClick: (e, val) => {\n          this.skip();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, \"Skip\"))), React.createElement(\"div\", {\n        className: \"Upload\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, React.createElement(Upload, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      })), React.createElement(TrackList, {\n        playedQueue: this.state.playedQueue,\n        unplayedQueue: this.state.unplayedQueue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }));\n    } else {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, \"Loading...\");\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/if994249/eclipse-workspace/song-drop/song-drop-app/src/App.js"],"names":["React","Component","w3cwebsocket","W3CWebSocket","PlayRateSlider","VolumeSlider","PlayBackSlider","Upload","TrackList","AudioContext","window","webkitAudioContext","audioContext","client","App","constructor","props","state","volume","playedQueue","unplayedQueue","requestCompleted","currentPos","duration","play","songName","source","createBufferSource","sourceStarted","gainNode","createGain","connect","destination","togglePlay","bind","smoothAlgorithm","val","Math","pow","log","getSound","url","request","XMLHttpRequest","open","responseType","a","onloadend","decodeAudioData","response","then","data","buffer","start","e","console","send","setNewSource","stop","oldSource","startPlay","setState","playSoundLoop","JSON","stringify","skip","elem","document","getElementById","innerHTML","componentDidMount","onopen","onmessage","message","dataFromServer","parse","undefined","update","newSong","render","position","top","width"],"mappings":";AAAA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,YAAY,IAAIC,YAAzB,QAA6C,WAA7C;AACA,OAAO,WAAP;AAEA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AAEA,MAAMC,YAAY,GAAGC,MAAM,CAACD,YAAP,IAAuBC,MAAM,CAACC,kBAAnD;AACA,MAAMC,YAAY,GAAG,IAAIH,YAAJ,EAArB;AAEA,MAAMI,MAAM,GAAG,IAAIV,YAAJ,CAAiB,wBAAjB,CAAf;;AAEA,MAAMW,GAAN,SAAkBb,SAAlB,CAA4B;AAE1Bc,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACZC,MAAAA,MAAM,EAAE,CADI;AAEZC,MAAAA,WAAW,EAAE,IAFD;AAGZC,MAAAA,aAAa,EAAE,IAHH;AAIZC,MAAAA,gBAAgB,EAAE,KAJN;AAKZC,MAAAA,UAAU,EAAE,CALA;AAMZC,MAAAA,QAAQ,EAAE,CANE;AAOZC,MAAAA,IAAI,EAAE,KAPM;AAQZC,MAAAA,QAAQ,EAAE;AARE,KAAb;AAWA,SAAKC,MAAL,GAAcd,YAAY,CAACe,kBAAb,EAAd;AACA,SAAKC,aAAL,GAAqB,KAArB;AAEA,SAAKC,QAAL,GAAgBjB,YAAY,CAACkB,UAAb,EAAhB;AACA,SAAKD,QAAL,CAAcE,OAAd,CAAsBnB,YAAY,CAACoB,WAAnC;AAEA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACD;;AAEDC,EAAAA,eAAe,CAACC,GAAD,EAAM;AACtB,WAAOC,IAAI,CAACC,GAAL,CAAUF,GAAG,GAAG,GAAhB,EAAuBC,IAAI,CAACE,GAAL,CAAS,EAAT,IAAeF,IAAI,CAACE,GAAL,CAAS,CAAT,CAAtC,CAAP;AACE;;AAEDC,EAAAA,QAAQ,GAAG;AACV,SAAKd,MAAL,GAAcd,YAAY,CAACe,kBAAb,EAAd;AAEA,QAAIc,GAAG,GAAG,gCAAV;AACG,QAAIC,OAAO,GAAG,IAAIC,cAAJ,EAAd;AACHD,IAAAA,OAAO,CAACE,IAAR,CAAa,KAAb,EAAoBH,GAApB,EAAyB,IAAzB;AACAC,IAAAA,OAAO,CAACG,YAAR,GAAuB,aAAvB;AACA,QAAIC,CAAC,GAAG,IAAR;;AACAJ,IAAAA,OAAO,CAACK,SAAR,GAAoB,MAAM;AACzBnC,MAAAA,YAAY,CAACoC,eAAb,CAA6BN,OAAO,CAACO,QAArC,EAA+CC,IAA/C,CAAoD,UAAUC,IAAV,EAAgB;AACnEL,QAAAA,CAAC,CAACpB,MAAF,CAAS0B,MAAT,GAAkBD,IAAlB;AACAL,QAAAA,CAAC,CAACpB,MAAF,CAASK,OAAT,CAAiBe,CAAC,CAACjB,QAAnB;;AACA,YAAIiB,CAAC,CAAC7B,KAAF,CAAQO,IAAR,IAAgB,CAACsB,CAAC,CAAClB,aAAvB,EAAsC;AACrCkB,UAAAA,CAAC,CAACpB,MAAF,CAAS2B,KAAT,CAAe,CAAf,EAAkBP,CAAC,CAAC7B,KAAF,CAAQK,UAA1B;AACAwB,UAAAA,CAAC,CAAClB,aAAF,GAAkB,IAAlB;AACA;AACD,OAPD,EAOI0B,CAAD,IAAO;AAAEC,QAAAA,OAAO,CAAChB,GAAR,CAAYe,CAAZ;AAAiB,OAP7B;AAQE,KATH;;AAUAZ,IAAAA,OAAO,CAACc,IAAR;AACA;;AAEDC,EAAAA,YAAY,GAAG;AACdF,IAAAA,OAAO,CAAChB,GAAR,CAAY,uBAAZ;;AACA,QAAI,KAAKX,aAAT,EAAwB;AACvB,WAAKF,MAAL,CAAYgC,IAAZ;AACA,WAAK9B,aAAL,GAAqB,KAArB;AACA;;AACD,QAAI+B,SAAS,GAAG,KAAKjC,MAArB;AACA,SAAKA,MAAL,GAAcd,YAAY,CAACe,kBAAb,EAAd;AACA,SAAKD,MAAL,CAAY0B,MAAZ,GAAqBO,SAAS,CAACP,MAA/B;AACA,SAAK1B,MAAL,CAAYK,OAAZ,CAAoB,KAAKF,QAAzB;AACA;;AAED+B,EAAAA,SAAS,GAAG;AACX,SAAKpB,QAAL;AACA;;AAEDP,EAAAA,UAAU,GAAG;AACZ,QAAIQ,GAAG,GAAG,sCAAV;AACA,SAAKoB,QAAL,CAAc;AACbrC,MAAAA,IAAI,EAAE,CAAC,KAAKP,KAAL,CAAWO;AADL,KAAd,EAEG,MAAM;AACR,WAAKsC,aAAL;AACAjD,MAAAA,MAAM,CAAC2C,IAAP,CAAYO,IAAI,CAACC,SAAL,CAAe;AAAExC,QAAAA,IAAI,EAAE,KAAKP,KAAL,CAAWO;AAAnB,OAAf,CAAZ;AACA,KALD;AAMA;;AACDyC,EAAAA,IAAI,GAAG;AACNpD,IAAAA,MAAM,CAAC2C,IAAP,CAAYO,IAAI,CAACC,SAAL,CAAe;AAAE1C,MAAAA,UAAU,EAAE,KAAKL,KAAL,CAAWM;AAAzB,KAAf,CAAZ;AACA;;AAEDuC,EAAAA,aAAa,GAAG;AACjB,QAAII,IAAI,GAAGC,QAAQ,CAACC,cAAT,CAAwB,cAAxB,CAAX;;AACA,QAAI,KAAKnD,KAAL,CAAWO,IAAf,EAAqB;AACpB,WAAKiC,YAAL;AACA,WAAK/B,MAAL,CAAY2B,KAAZ,CAAkB,CAAlB,EAAqB,KAAKpC,KAAL,CAAWK,UAAhC;AACA,WAAKM,aAAL,GAAqB,IAArB;AACAsC,MAAAA,IAAI,CAACG,SAAL,GAAiB,MAAjB;AACA,KALD,MAMK;AACJ,UAAI,KAAKzC,aAAT,EAAwB;AACvB,aAAKF,MAAL,CAAYgC,IAAZ;AACA,aAAK9B,aAAL,GAAqB,KAArB;AACA;;AACDsC,MAAAA,IAAI,CAACG,SAAL,GAAiB,OAAjB;AACA;AACC;;AAEDC,EAAAA,iBAAiB,GAAG;AACnBzD,IAAAA,MAAM,CAAC0D,MAAP,GAAgB,MAAM;AACrBhB,MAAAA,OAAO,CAAChB,GAAR,CAAY,4BAAZ;AACA,KAFD;;AAGA1B,IAAAA,MAAM,CAAC2D,SAAP,GAAoBC,OAAD,IAAa;AAC9B,YAAMC,cAAc,GAAGX,IAAI,CAACY,KAAL,CAAWF,OAAO,CAACtB,IAAnB,CAAvB;;AACA,UAAIuB,cAAc,CAACxD,MAAf,KAA0B0D,SAA9B,EAAyC;AACxC,aAAKf,QAAL,CAAc;AAAE3C,UAAAA,MAAM,EAAEwD,cAAc,CAACxD;AAAzB,SAAd;AACA;;AACD,UAAIwD,cAAc,CAACvD,WAAf,KAA+ByD,SAAnC,EAA8C;AAC7C,aAAKf,QAAL,CAAc;AAAE1C,UAAAA,WAAW,EAAEuD,cAAc,CAACvD;AAA9B,SAAd;AACA;;AACD,UAAIuD,cAAc,CAACtD,aAAf,KAAiCwD,SAArC,EAAgD;AAC/C,aAAKf,QAAL,CAAc;AAAEzC,UAAAA,aAAa,EAAEsD,cAAc,CAACtD;AAAhC,SAAd;AACA;;AAED,UAAIsD,cAAc,CAACjD,QAAf,KAA4BmD,SAAhC,EAA2C;AAC1C,aAAKf,QAAL,CAAc;AAAEpC,UAAAA,QAAQ,EAAEiD,cAAc,CAACjD;AAA3B,SAAd;AACA;;AACD,UAAIiD,cAAc,CAACpD,UAAf,KAA8BsD,SAAlC,EAA6C;AAC5C,aAAKf,QAAL,CAAc;AAAEvC,UAAAA,UAAU,EAAEoD,cAAc,CAACpD;AAA7B,SAAd;AACA;;AACD,UAAIoD,cAAc,CAACnD,QAAf,KAA4BqD,SAAhC,EAA2C;AAC1C,aAAKf,QAAL,CAAc;AAAEtC,UAAAA,QAAQ,EAAEmD,cAAc,CAACnD;AAA3B,SAAd;AACA;;AACD,UAAImD,cAAc,CAAClD,IAAf,KAAwBoD,SAA5B,EAAuC;AACtC,aAAKf,QAAL,CAAc;AAAErC,UAAAA,IAAI,EAAEkD,cAAc,CAAClD;AAAvB,SAAd;AACA;;AACD,UAAIkD,cAAc,CAACG,MAAf,KAA0BD,SAA9B,EAAyC;AACxC,YAAIF,cAAc,CAACG,MAAf,KAA0B,KAA9B,EAAqC;AACpC,eAAKf,aAAL;AACA;;AACD,YAAIY,cAAc,CAACG,MAAf,KAA0B,OAA9B,EAAuC;AACtC,eAAKhB,QAAL,CAAc;AAAErC,YAAAA,IAAI,EAAEkD,cAAc,CAAClD;AAAvB,WAAd,EAA6C,MAAM;AAClD,iBAAKsC,aAAL;AACA,WAFD;AAGA;AACD;;AACD,UAAIY,cAAc,CAACI,OAAf,KAA2BF,SAA/B,EAA0C;AACzC,YAAIF,cAAc,CAACI,OAAnB,EAA4B;AAC3B,cAAI,KAAK7D,KAAL,CAAWO,IAAf,EAAqB;AACpB,iBAAKE,MAAL,CAAYgC,IAAZ;AACA,iBAAK9B,aAAL,GAAqB,KAArB;AACA;;AACD,eAAKY,QAAL;AACA;AACD;;AACD,WAAKqB,QAAL,CAAc;AAAExC,QAAAA,gBAAgB,EAAE;AAApB,OAAd;AACD,KA5CD;AA6CD;;AAEA0D,EAAAA,MAAM,GAAG;AACV,QAAI,KAAK9D,KAAL,CAAWI,gBAAf,EAAiC;AAChC,aACK;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,YAAD;AAAc,QAAA,QAAQ,EAAE,KAAKQ,QAA7B;AAAuC,QAAA,MAAM,EAAE,KAAKZ,KAAL,CAAWC,MAA1D;AAAkE,QAAA,MAAM,EAAEL,MAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AAAK,QAAA,KAAK,EAAE;AAACmE,UAAAA,QAAQ,EAAE,UAAX;AAAuBC,UAAAA,GAAG,EAAE,KAA5B;AAAmCC,UAAAA,KAAK,EAAE;AAA1C,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC;AAAQ,QAAA,EAAE,EAAC,aAAX;AAAyB,QAAA,IAAI,EAAC,QAA9B;AAAuC,QAAA,OAAO,EAAE,CAAC5B,CAAD,EAAIlB,GAAJ,KAAY;AAAC,eAAKwB,SAAL;AAAkB,SAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADD,CAFF,EAKE;AAAQ,QAAA,SAAS,EAAC,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI,KAAK3C,KAAL,CAAWQ,QAAf,CADD,EAEC,oBAAC,cAAD;AAAgB,QAAA,IAAI,EAAE,KAAKR,KAAL,CAAWO,IAAjC;AAAuC,QAAA,UAAU,EAAE,KAAKP,KAAL,CAAWK,UAA9D;AAA0E,QAAA,QAAQ,EAAE,KAAKL,KAAL,CAAWM,QAA/F;AAAyG,QAAA,MAAM,EAAEV,MAAjH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFD,EAGC;AAAQ,QAAA,EAAE,EAAC,cAAX;AAA0B,QAAA,IAAI,EAAC,QAA/B;AAAwC,QAAA,OAAO,EAAE,CAACyC,CAAD,EAAIlB,GAAJ,KAAY;AAAE,eAAKH,UAAL;AAAoB,SAAnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHD,EAIC;AAAQ,QAAA,EAAE,EAAC,MAAX;AAAkB,QAAA,IAAI,EAAC,QAAvB;AAAgC,QAAA,OAAO,EAAE,CAACqB,CAAD,EAAIlB,GAAJ,KAAY;AAAE,eAAK6B,IAAL;AAAc,SAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJD,CALF,CADF,EAaE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAbF,EAgBE,oBAAC,SAAD;AAAW,QAAA,WAAW,EAAE,KAAKhD,KAAL,CAAWE,WAAnC;AAAgD,QAAA,aAAa,EAAE,KAAKF,KAAL,CAAWG,aAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAhBF,CADL;AAoBA,KArBD,MAsBK;AACJ,aACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADD;AAGA;AACC;;AA9KyB;;AAiL5B,eAAeN,GAAf","sourcesContent":["// src/App.js\r\n\r\nimport React, { Component } from \"react\";\r\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\r\nimport './App.css';\r\n\r\nimport PlayRateSlider from './control-sliders/PlayRateSlider';\r\nimport VolumeSlider from './control-sliders/VolumeSlider';\r\nimport PlayBackSlider from './control-sliders/PlayBackSlider';\r\nimport Upload from './Upload';\r\nimport TrackList from './track-list/TrackList';\r\n\r\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\r\nconst audioContext = new AudioContext();\r\n\r\nconst client = new W3CWebSocket('ws://172.18.86.35:5000');\r\n\r\nclass App extends Component {\r\n\t\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    \tvolume: 0,\r\n    \tplayedQueue: null,\r\n    \tunplayedQueue: null,\r\n    \trequestCompleted: false,\r\n    \tcurrentPos: 0,\r\n    \tduration: 0,\r\n    \tplay: false,\r\n    \tsongName: \"test\"\r\n    };\r\n    \r\n    this.source = audioContext.createBufferSource();\r\n    this.sourceStarted = false;\r\n    \r\n    this.gainNode = audioContext.createGain();\r\n    this.gainNode.connect(audioContext.destination);\r\n    \r\n    this.togglePlay = this.togglePlay.bind(this);\r\n  }\r\n  \r\n  smoothAlgorithm(val) {\r\n\treturn Math.pow((val / 100), (Math.log(10) / Math.log(2)));\r\n  }\r\n  \r\n  getSound() {\r\n\t  this.source = audioContext.createBufferSource();\r\n\t  \r\n\t  var url = \"http://172.18.86.35:5001/sound\"\r\n      var request = new XMLHttpRequest();\r\n\t  request.open(\"GET\", url, true);\r\n\t  request.responseType = \"arraybuffer\";\r\n\t  var a = this;\r\n\t  request.onloadend = () => {\r\n\t\t  audioContext.decodeAudioData(request.response).then(function (data) {\r\n\t\t\t  a.source.buffer = data;\r\n\t\t\t  a.source.connect(a.gainNode);\r\n\t\t\t  if (a.state.play && !a.sourceStarted) {\r\n\t\t\t\t  a.source.start(0, a.state.currentPos);\r\n\t\t\t\t  a.sourceStarted = true;\r\n\t\t\t  }\r\n\t\t  }, (e) => { console.log(e); });\r\n  \t  }\r\n\t  request.send();\r\n  }\r\n  \r\n  setNewSource() {\r\n\t  console.log(\"setting new source...\")\r\n\t  if (this.sourceStarted) {\r\n\t\t  this.source.stop();\r\n\t\t  this.sourceStarted = false;\r\n\t  }\r\n\t  var oldSource = this.source;\r\n\t  this.source = audioContext.createBufferSource();\r\n\t  this.source.buffer = oldSource.buffer;\r\n\t  this.source.connect(this.gainNode);\r\n  }\r\n  \r\n  startPlay() {\r\n\t  this.getSound();\r\n  }\r\n  \r\n  togglePlay() {\r\n\t  var url = \"http://172.18.86.35:5001/togglepause\";\r\n\t  this.setState({\r\n\t\t  play: !this.state.play\r\n\t  }, () => {\r\n\t\t  this.playSoundLoop();\r\n\t\t  client.send(JSON.stringify({ play: this.state.play }));\r\n\t  })\r\n  }\r\n  skip() {\r\n\t  client.send(JSON.stringify({ currentPos: this.state.duration }));\r\n  }\r\n  \r\n  playSoundLoop() {\r\n\tvar elem = document.getElementById(\"toggleButton\");\r\n\tif (this.state.play) {\r\n\t\tthis.setNewSource();\r\n\t\tthis.source.start(0, this.state.currentPos); \r\n\t\tthis.sourceStarted = true;\r\n\t\telem.innerHTML = 'Stop';\r\n\t}\r\n\telse {\r\n\t\tif (this.sourceStarted) {\r\n\t\t\tthis.source.stop();\r\n\t\t\tthis.sourceStarted = false;\r\n\t\t}\r\n\t\telem.innerHTML = 'Start';\r\n\t}\r\n  }\r\n  \r\n  componentDidMount() {\r\n\t  client.onopen = () => {\r\n\t   console.log('WebSocket Client Connected');\r\n\t  };\r\n\t  client.onmessage = (message) => {\r\n\t    const dataFromServer = JSON.parse(message.data);\r\n\t    if (dataFromServer.volume !== undefined) {\r\n\t    \tthis.setState({ volume: dataFromServer.volume });\t    \t\r\n\t    }\r\n\t    if (dataFromServer.playedQueue !== undefined) {\r\n\t    \tthis.setState({ playedQueue: dataFromServer.playedQueue });    \t\r\n\t    }\r\n\t    if (dataFromServer.unplayedQueue !== undefined) {\r\n\t    \tthis.setState({ unplayedQueue: dataFromServer.unplayedQueue });    \t\r\n\t    }\r\n\t    \r\n\t    if (dataFromServer.songName !== undefined) {\r\n\t    \tthis.setState({ songName: dataFromServer.songName });\r\n\t    }\r\n\t    if (dataFromServer.currentPos !== undefined) {\r\n\t    \tthis.setState({ currentPos: dataFromServer.currentPos });\r\n\t    }\r\n\t    if (dataFromServer.duration !== undefined) {\r\n\t    \tthis.setState({ duration: dataFromServer.duration });\r\n\t    }\r\n\t    if (dataFromServer.play !== undefined) {\r\n\t    \tthis.setState({ play: dataFromServer.play });\r\n\t    }\r\n\t    if (dataFromServer.update !== undefined) {\r\n\t    \tif (dataFromServer.update === \"pos\") {\r\n\t    \t\tthis.playSoundLoop();\r\n\t    \t}\r\n\t    \tif (dataFromServer.update === \"pause\") {\r\n\t    \t\tthis.setState({ play: dataFromServer.play }, () => {\r\n\t    \t\t\tthis.playSoundLoop();\r\n\t    \t\t});\r\n\t    \t}\r\n\t    }\r\n\t    if (dataFromServer.newSong !== undefined) {\r\n\t    \tif (dataFromServer.newSong) {\r\n\t    \t\tif (this.state.play) {\r\n\t    \t\t\tthis.source.stop();\r\n\t\t    \t\tthis.sourceStarted = false;\r\n\t    \t\t}\r\n\t    \t\tthis.getSound();\r\n\t    \t}\r\n\t    }\r\n\t    this.setState({ requestCompleted: true });\r\n\t  };\r\n\t}  \r\n  \r\n  render() {\r\n\tif (this.state.requestCompleted) {\r\n\t\treturn (\r\n\t      <div className=\"App\">\r\n\t        <center>\r\n\t          <VolumeSlider gainNode={this.gainNode} volume={this.state.volume} client={client}/>\r\n\t          <div style={{position: \"absolute\", top: \"50%\", width: \"100%\"}}>\r\n\t          \t<button id=\"startButton\" type=\"button\" onClick={(e, val) => {this.startPlay();}}>Begin</button>\r\n\t          </div>\r\n\t          <center className=\"player\">\r\n\t          \t<p>{this.state.songName}</p>\r\n\t          \t<PlayBackSlider play={this.state.play} currentPos={this.state.currentPos} duration={this.state.duration} client={client}/>\r\n\t          \t<button id=\"toggleButton\" type=\"button\" onClick={(e, val) => { this.togglePlay(); }}>Stop</button>\r\n\t          \t<button id=\"skip\" type=\"button\" onClick={(e, val) => { this.skip(); }}>Skip</button>\r\n\t          </center>\r\n\t        </center>\r\n\t        <div className=\"Upload\">\r\n\t          <Upload />\r\n\t        </div>\r\n\t        <TrackList playedQueue={this.state.playedQueue} unplayedQueue={this.state.unplayedQueue}/>\r\n\t      </div>\r\n\t    );\r\n\t}\r\n\telse {\r\n\t\treturn (\r\n\t\t\t<div>Loading...</div>\r\n\t\t)\r\n\t}\r\n  }\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}